// <auto-generated />
using System;
using AssetMonitorDataAccess.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AssetMonitorDataAccess.Migrations
{
    [DbContext(typeof(AssetMonitorContext))]
    [Migration("20220228212826_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AssetMonitorDataAccess.Models.AgentDataType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AgentDataType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataType = "PerformanceCounter"
                        },
                        new
                        {
                            Id = 2,
                            DataType = "WMI"
                        },
                        new
                        {
                            Id = 3,
                            DataType = "ServiceState"
                        });
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.AgentTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgentDataTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PerformanceCounter")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("WmiManagementObject")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AgentDataTypeId");

                    b.ToTable("AgentTag");

                    b.HasCheckConstraint("CK_AgentTag_NotNullTagInfo", "[PerformanceCounter] IS NOT NULL OR [WmiManagementObject] IS NOT NULL OR [ServiceName] IS NOT NULL");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgentDataTypeId = 1,
                            PerformanceCounter = "Processor;% Processor Time;_Total"
                        },
                        new
                        {
                            Id = 2,
                            AgentDataTypeId = 1,
                            PerformanceCounter = "Memory;Available MBytes"
                        },
                        new
                        {
                            Id = 3,
                            AgentDataTypeId = 2,
                            WmiManagementObject = "TotalPhysicalMemory"
                        },
                        new
                        {
                            Id = 4,
                            AgentDataTypeId = 1,
                            PerformanceCounter = "PhysicalDisk;% Idle Time;_Total"
                        },
                        new
                        {
                            Id = 5,
                            AgentDataTypeId = 1,
                            PerformanceCounter = "PhysicalDisk;% Disk Time;_Total"
                        },
                        new
                        {
                            Id = 6,
                            AgentDataTypeId = 1,
                            PerformanceCounter = "LogicalDisk;% Free Space;_Total"
                        });
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.AlarmTagConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivationTime")
                        .HasColumnType("int");

                    b.Property<int>("AlarmTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AlarmTypeId");

                    b.HasIndex("TagId", "AlarmTypeId")
                        .IsUnique();

                    b.ToTable("AlarmTagConfig");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivationTime = 30,
                            AlarmTypeId = 1,
                            Description = "No ping!",
                            TagId = 1,
                            Value = "False"
                        },
                        new
                        {
                            Id = 2,
                            ActivationTime = 30,
                            AlarmTypeId = 3,
                            Description = "CPU usage is to high!",
                            TagId = 3,
                            Value = "50"
                        },
                        new
                        {
                            Id = 3,
                            ActivationTime = 30,
                            AlarmTypeId = 1,
                            Description = "No ping!",
                            TagId = 14,
                            Value = "False"
                        });
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.AlarmType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AlarmType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Equal"
                        },
                        new
                        {
                            Id = 2,
                            Type = "NotEqual"
                        },
                        new
                        {
                            Id = 3,
                            Type = "GreaterOrEqual"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Greater"
                        },
                        new
                        {
                            Id = 5,
                            Type = "LessOrEqual"
                        },
                        new
                        {
                            Id = 6,
                            Type = "Less"
                        });
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("TagSetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagSetId");

                    b.ToTable("Asset");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IpAddress = "127.0.0.1",
                            Name = "AssetMonitorNET Server",
                            TagSetId = 1
                        });
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.AssetProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValueDataTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ValueDataTypeId");

                    b.ToTable("AssetProperty");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Agent TCP Port",
                            Name = "AgentTcpPort",
                            ValueDataTypeId = 2
                        },
                        new
                        {
                            Id = 2,
                            Description = "SNMP UDP Port",
                            Name = "SnmpUdpPort",
                            ValueDataTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "SNMP timeout",
                            Name = "SnmpTimeout",
                            ValueDataTypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            Description = "SNMP number of retries",
                            Name = "SnmpRetries",
                            ValueDataTypeId = 2
                        },
                        new
                        {
                            Id = 5,
                            Description = "SNMP Community String",
                            Name = "SnmpCommunity",
                            ValueDataTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "SNMP Version (1 or 2)",
                            Name = "SnmpVersion",
                            ValueDataTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            Description = "Enable or disable email notifications",
                            Name = "EmailNotificationsEnable",
                            ValueDataTypeId = 4
                        });
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.AssetPropertyDataType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("AssetPropertyDataType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataType = "String"
                        },
                        new
                        {
                            Id = 2,
                            DataType = "Integer"
                        },
                        new
                        {
                            Id = 3,
                            DataType = "Double"
                        },
                        new
                        {
                            Id = 4,
                            DataType = "Boolean"
                        });
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.AssetPropertyValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("AssetPropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssetPropertyId");

                    b.ToTable("AssetPropertyValue");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AssetId = 1,
                            AssetPropertyId = 2,
                            Value = "161"
                        },
                        new
                        {
                            Id = -2,
                            AssetId = 1,
                            AssetPropertyId = 3,
                            Value = "3000"
                        },
                        new
                        {
                            Id = -3,
                            AssetId = 1,
                            AssetPropertyId = 4,
                            Value = "1"
                        },
                        new
                        {
                            Id = -4,
                            AssetId = 1,
                            AssetPropertyId = 5,
                            Value = "public"
                        },
                        new
                        {
                            Id = -5,
                            AssetId = 1,
                            AssetPropertyId = 6,
                            Value = "2"
                        });
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.HistoricalTagConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HistorizationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistorizationTypeId");

                    b.HasIndex("TagId", "HistorizationTypeId")
                        .IsUnique();

                    b.ToTable("HistoricalTagConfig");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HistorizationTypeId = 1,
                            TagId = 1
                        },
                        new
                        {
                            Id = 2,
                            HistorizationTypeId = 3,
                            TagId = 2
                        },
                        new
                        {
                            Id = 3,
                            HistorizationTypeId = 3,
                            TagId = 3
                        },
                        new
                        {
                            Id = 4,
                            HistorizationTypeId = 2,
                            TagId = 3
                        },
                        new
                        {
                            Id = 5,
                            HistorizationTypeId = 3,
                            TagId = 4
                        },
                        new
                        {
                            Id = 6,
                            HistorizationTypeId = 3,
                            TagId = 5
                        },
                        new
                        {
                            Id = 7,
                            HistorizationTypeId = 3,
                            TagId = 6
                        },
                        new
                        {
                            Id = 8,
                            HistorizationTypeId = 3,
                            TagId = 7
                        },
                        new
                        {
                            Id = 9,
                            HistorizationTypeId = 3,
                            TagId = 8
                        },
                        new
                        {
                            Id = 10,
                            HistorizationTypeId = 3,
                            TagId = 12
                        },
                        new
                        {
                            Id = 11,
                            HistorizationTypeId = 1,
                            TagId = 14
                        },
                        new
                        {
                            Id = 12,
                            HistorizationTypeId = 3,
                            TagId = 15
                        },
                        new
                        {
                            Id = 13,
                            HistorizationTypeId = 1,
                            TagId = 19
                        });
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.HistoricalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HistoricalType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Last"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Maximum"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Average"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Minimum"
                        });
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.IcmpTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IcmpTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IcmpTypeId");

                    b.ToTable("IcmpTag");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IcmpTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            IcmpTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            IcmpTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            IcmpTypeId = 2
                        });
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.IcmpType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IcmpType");
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.SnmpAssetValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("SnmpTagId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("SnmpTagId");

                    b.ToTable("SnmpAssetValue");
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.SnmpCommunicationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("SnmpCommunicationType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Normal"
                        },
                        new
                        {
                            Id = 2,
                            Type = "OnDemand"
                        });
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.SnmpOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("SnmpOperation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Operation = "Get"
                        });
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.SnmpTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<int>("SnmpCommunicationTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("SnmpCommunicationTypeId");

                    b.ToTable("SnmpTag");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OID = "1.3.6.1.2.1.1.5.0",
                            OperationId = 1,
                            SnmpCommunicationTypeId = 0
                        },
                        new
                        {
                            Id = 2,
                            OID = "1.3.6.1.2.1.1.1.0",
                            OperationId = 1,
                            SnmpCommunicationTypeId = 0
                        },
                        new
                        {
                            Id = 3,
                            OID = "1.3.6.1.2.1.1.2.0",
                            OperationId = 1,
                            SnmpCommunicationTypeId = 0
                        },
                        new
                        {
                            Id = 4,
                            OID = "1.3.6.1.2.1.1.3.0",
                            OperationId = 1,
                            SnmpCommunicationTypeId = 0
                        },
                        new
                        {
                            Id = 5,
                            OID = "1.3.6.1.2.1.1.4.0",
                            OperationId = 1,
                            SnmpCommunicationTypeId = 0
                        },
                        new
                        {
                            Id = 6,
                            OID = "1.3.6.1.2.1.1.5.0",
                            OperationId = 1,
                            SnmpCommunicationTypeId = 0
                        },
                        new
                        {
                            Id = 7,
                            OID = "1.3.6.1.2.1.1.1.0",
                            OperationId = 1,
                            SnmpCommunicationTypeId = 0
                        },
                        new
                        {
                            Id = 8,
                            OID = "1.3.6.1.2.1.1.2.0",
                            OperationId = 1,
                            SnmpCommunicationTypeId = 0
                        },
                        new
                        {
                            Id = 9,
                            OID = "1.3.6.1.2.1.1.3.0",
                            OperationId = 1,
                            SnmpCommunicationTypeId = 0
                        },
                        new
                        {
                            Id = 10,
                            OID = "1.3.6.1.2.1.1.4.0",
                            OperationId = 1,
                            SnmpCommunicationTypeId = 0
                        });
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.SnmpVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("SnmpVersion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Version = "V1"
                        },
                        new
                        {
                            Id = 2,
                            Version = "V2"
                        });
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ScaleFactor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0);

                    b.Property<double>("ScaleOffset")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("TagCommunicationRelId")
                        .HasColumnType("int");

                    b.Property<int>("TagSetId")
                        .HasColumnType("int");

                    b.Property<string>("Tagname")
                        .IsRequired()
                        .HasColumnType("nvarchar(70)")
                        .HasMaxLength(70);

                    b.Property<int>("ValueDataTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagCommunicationRelId")
                        .IsUnique();

                    b.HasIndex("ValueDataTypeId");

                    b.HasIndex("TagSetId", "Tagname")
                        .IsUnique();

                    b.ToTable("Tag");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ScaleFactor = 0.0,
                            ScaleOffset = 0.0,
                            TagCommunicationRelId = 1,
                            TagSetId = 1,
                            Tagname = "ICMP.PingState",
                            ValueDataTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            ScaleFactor = 0.0,
                            ScaleOffset = 0.0,
                            TagCommunicationRelId = 2,
                            TagSetId = 1,
                            Tagname = "ICMP.PingResponseTime",
                            ValueDataTypeId = 6
                        },
                        new
                        {
                            Id = 3,
                            ScaleFactor = 0.0,
                            ScaleOffset = 0.0,
                            TagCommunicationRelId = 3,
                            TagSetId = 1,
                            Tagname = "Agent.CpuUsage",
                            ValueDataTypeId = 3
                        },
                        new
                        {
                            Id = 4,
                            ScaleFactor = 0.0,
                            ScaleOffset = 0.0,
                            TagCommunicationRelId = 4,
                            TagSetId = 1,
                            Tagname = "Agent.MemoryAvailable",
                            ValueDataTypeId = 3
                        },
                        new
                        {
                            Id = 5,
                            ScaleFactor = 0.0,
                            ScaleOffset = 0.0,
                            TagCommunicationRelId = 5,
                            TagSetId = 1,
                            Tagname = "Agent.MemoryTotal",
                            ValueDataTypeId = 4
                        },
                        new
                        {
                            Id = 6,
                            ScaleFactor = 0.0,
                            ScaleOffset = 0.0,
                            TagCommunicationRelId = 6,
                            TagSetId = 1,
                            Tagname = "Agent.PhysicalDiskIdleTime",
                            ValueDataTypeId = 3
                        },
                        new
                        {
                            Id = 7,
                            ScaleFactor = 0.0,
                            ScaleOffset = 0.0,
                            TagCommunicationRelId = 7,
                            TagSetId = 1,
                            Tagname = "Agent.PhysicalDiskWorkTime",
                            ValueDataTypeId = 3
                        },
                        new
                        {
                            Id = 8,
                            ScaleFactor = 0.0,
                            ScaleOffset = 0.0,
                            TagCommunicationRelId = 8,
                            TagSetId = 1,
                            Tagname = "Agent.LogicalDiskFreeSpace",
                            ValueDataTypeId = 3
                        },
                        new
                        {
                            Id = 9,
                            ScaleFactor = 0.0,
                            ScaleOffset = 0.0,
                            TagCommunicationRelId = 9,
                            TagSetId = 1,
                            Tagname = "SNMP.sysName",
                            ValueDataTypeId = 5
                        },
                        new
                        {
                            Id = 10,
                            ScaleFactor = 0.0,
                            ScaleOffset = 0.0,
                            TagCommunicationRelId = 10,
                            TagSetId = 1,
                            Tagname = "SNMP.sysDescr",
                            ValueDataTypeId = 5
                        },
                        new
                        {
                            Id = 11,
                            ScaleFactor = 0.0,
                            ScaleOffset = 0.0,
                            TagCommunicationRelId = 11,
                            TagSetId = 1,
                            Tagname = "SNMP.sysObjectID",
                            ValueDataTypeId = 5
                        },
                        new
                        {
                            Id = 12,
                            ScaleFactor = 0.0,
                            ScaleOffset = 0.0,
                            TagCommunicationRelId = 12,
                            TagSetId = 1,
                            Tagname = "SNMP.sysUpTime",
                            ValueDataTypeId = 5
                        },
                        new
                        {
                            Id = 13,
                            ScaleFactor = 0.0,
                            ScaleOffset = 0.0,
                            TagCommunicationRelId = 13,
                            TagSetId = 1,
                            Tagname = "SNMP.sysContact",
                            ValueDataTypeId = 5
                        },
                        new
                        {
                            Id = 14,
                            ScaleFactor = 0.0,
                            ScaleOffset = 0.0,
                            TagCommunicationRelId = 14,
                            TagSetId = 2,
                            Tagname = "ICMP.PingState",
                            ValueDataTypeId = 1
                        },
                        new
                        {
                            Id = 15,
                            ScaleFactor = 0.0,
                            ScaleOffset = 0.0,
                            TagCommunicationRelId = 15,
                            TagSetId = 2,
                            Tagname = "ICMP.PingResponseTime",
                            ValueDataTypeId = 6
                        },
                        new
                        {
                            Id = 16,
                            ScaleFactor = 0.0,
                            ScaleOffset = 0.0,
                            TagCommunicationRelId = 16,
                            TagSetId = 2,
                            Tagname = "SNMP.sysName",
                            ValueDataTypeId = 5
                        },
                        new
                        {
                            Id = 17,
                            ScaleFactor = 0.0,
                            ScaleOffset = 0.0,
                            TagCommunicationRelId = 17,
                            TagSetId = 2,
                            Tagname = "SNMP.sysDescr",
                            ValueDataTypeId = 5
                        },
                        new
                        {
                            Id = 18,
                            ScaleFactor = 0.0,
                            ScaleOffset = 0.0,
                            TagCommunicationRelId = 18,
                            TagSetId = 2,
                            Tagname = "SNMP.sysObjectID",
                            ValueDataTypeId = 5
                        },
                        new
                        {
                            Id = 19,
                            ScaleFactor = 0.0,
                            ScaleOffset = 0.0,
                            TagCommunicationRelId = 19,
                            TagSetId = 2,
                            Tagname = "SNMP.sysUpTime",
                            ValueDataTypeId = 5
                        },
                        new
                        {
                            Id = 20,
                            ScaleFactor = 0.0,
                            ScaleOffset = 0.0,
                            TagCommunicationRelId = 20,
                            TagSetId = 2,
                            Tagname = "SNMP.sysContact",
                            ValueDataTypeId = 5
                        });
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.TagCommunicationRel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgentTagId")
                        .HasColumnType("int");

                    b.Property<int?>("IcmpTagId")
                        .HasColumnType("int");

                    b.Property<int?>("SnmpTagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentTagId")
                        .IsUnique()
                        .HasFilter("[AgentTagId] IS NOT NULL");

                    b.HasIndex("IcmpTagId")
                        .IsUnique()
                        .HasFilter("[IcmpTagId] IS NOT NULL");

                    b.HasIndex("SnmpTagId")
                        .IsUnique()
                        .HasFilter("[SnmpTagId] IS NOT NULL");

                    b.ToTable("TagCommunicationRel");

                    b.HasCheckConstraint("CK_AlarmTagConfig_PingOrAgentOrSnmp", "([IcmpTagId] IS NOT NULL AND [AgentTagId] IS NULL AND [SnmpTagId] IS NULL) OR ([IcmpTagId] IS NULL AND [AgentTagId] IS NOT NULL AND [SnmpTagId] IS NULL) OR ([IcmpTagId] IS NULL AND [AgentTagId] IS NULL AND [SnmpTagId] IS NOT NULL)");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IcmpTagId = 1
                        },
                        new
                        {
                            Id = 2,
                            IcmpTagId = 2
                        },
                        new
                        {
                            Id = 3,
                            AgentTagId = 1
                        },
                        new
                        {
                            Id = 4,
                            AgentTagId = 2
                        },
                        new
                        {
                            Id = 5,
                            AgentTagId = 3
                        },
                        new
                        {
                            Id = 6,
                            AgentTagId = 4
                        },
                        new
                        {
                            Id = 7,
                            AgentTagId = 5
                        },
                        new
                        {
                            Id = 8,
                            AgentTagId = 6
                        },
                        new
                        {
                            Id = 9,
                            SnmpTagId = 1
                        },
                        new
                        {
                            Id = 10,
                            SnmpTagId = 2
                        },
                        new
                        {
                            Id = 11,
                            SnmpTagId = 3
                        },
                        new
                        {
                            Id = 12,
                            SnmpTagId = 4
                        },
                        new
                        {
                            Id = 13,
                            SnmpTagId = 5
                        },
                        new
                        {
                            Id = 14,
                            IcmpTagId = 3
                        },
                        new
                        {
                            Id = 15,
                            IcmpTagId = 4
                        },
                        new
                        {
                            Id = 16,
                            SnmpTagId = 6
                        },
                        new
                        {
                            Id = 17,
                            SnmpTagId = 7
                        },
                        new
                        {
                            Id = 18,
                            SnmpTagId = 8
                        },
                        new
                        {
                            Id = 19,
                            SnmpTagId = 9
                        },
                        new
                        {
                            Id = 20,
                            SnmpTagId = 10
                        });
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.TagDataType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("TagDataType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataType = "Boolean"
                        },
                        new
                        {
                            Id = 2,
                            DataType = "Integer"
                        },
                        new
                        {
                            Id = 3,
                            DataType = "Float"
                        },
                        new
                        {
                            Id = 4,
                            DataType = "Double"
                        },
                        new
                        {
                            Id = 5,
                            DataType = "String"
                        },
                        new
                        {
                            Id = 6,
                            DataType = "Long"
                        });
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.TagSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TagSet");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Windows Agent and SNMP Default"
                        },
                        new
                        {
                            Id = 2,
                            Name = "SNMP Default"
                        });
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.UserEmailAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserEmailAddressSetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserEmailAddressSetId");

                    b.ToTable("UserEmailAddress");
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.UserEmailAddressSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserEmailAddressSet");
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.UserEmailAssetRel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("UserEmailAddressSetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("UserEmailAddressSetId");

                    b.ToTable("UserEmailAssetRel");
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.AgentTag", b =>
                {
                    b.HasOne("AssetMonitorDataAccess.Models.AgentDataType", "AgentDataType")
                        .WithMany()
                        .HasForeignKey("AgentDataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.AlarmTagConfig", b =>
                {
                    b.HasOne("AssetMonitorDataAccess.Models.AlarmType", "AlarmType")
                        .WithMany()
                        .HasForeignKey("AlarmTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetMonitorDataAccess.Models.Tag", "Tag")
                        .WithMany("AlarmTagConfigs")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.Asset", b =>
                {
                    b.HasOne("AssetMonitorDataAccess.Models.TagSet", "TagSet")
                        .WithMany()
                        .HasForeignKey("TagSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.AssetProperty", b =>
                {
                    b.HasOne("AssetMonitorDataAccess.Models.AssetPropertyDataType", "ValueDataType")
                        .WithMany()
                        .HasForeignKey("ValueDataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.AssetPropertyValue", b =>
                {
                    b.HasOne("AssetMonitorDataAccess.Models.Asset", "Asset")
                        .WithMany("AssetPropertyValues")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetMonitorDataAccess.Models.AssetProperty", "AssetProperty")
                        .WithMany()
                        .HasForeignKey("AssetPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.HistoricalTagConfig", b =>
                {
                    b.HasOne("AssetMonitorDataAccess.Models.HistoricalType", "HistorizationType")
                        .WithMany()
                        .HasForeignKey("HistorizationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetMonitorDataAccess.Models.Tag", "Tag")
                        .WithMany("HistoricalTagConfigs")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.IcmpTag", b =>
                {
                    b.HasOne("AssetMonitorDataAccess.Models.IcmpType", "IcmpType")
                        .WithMany()
                        .HasForeignKey("IcmpTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.SnmpAssetValue", b =>
                {
                    b.HasOne("AssetMonitorDataAccess.Models.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetMonitorDataAccess.Models.SnmpTag", "SnmpTag")
                        .WithMany()
                        .HasForeignKey("SnmpTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.SnmpTag", b =>
                {
                    b.HasOne("AssetMonitorDataAccess.Models.SnmpOperation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetMonitorDataAccess.Models.SnmpCommunicationType", "SnmpCommunicationType")
                        .WithMany()
                        .HasForeignKey("SnmpCommunicationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.Tag", b =>
                {
                    b.HasOne("AssetMonitorDataAccess.Models.TagCommunicationRel", "TagCommunicationRel")
                        .WithOne("Tag")
                        .HasForeignKey("AssetMonitorDataAccess.Models.Tag", "TagCommunicationRelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetMonitorDataAccess.Models.TagSet", "TagSet")
                        .WithMany("Tags")
                        .HasForeignKey("TagSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetMonitorDataAccess.Models.TagDataType", "ValueDataType")
                        .WithMany()
                        .HasForeignKey("ValueDataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.TagCommunicationRel", b =>
                {
                    b.HasOne("AssetMonitorDataAccess.Models.AgentTag", "AgentTag")
                        .WithOne("TagCommunicationRel")
                        .HasForeignKey("AssetMonitorDataAccess.Models.TagCommunicationRel", "AgentTagId");

                    b.HasOne("AssetMonitorDataAccess.Models.IcmpTag", "IcmpTag")
                        .WithOne("TagCommunicationRel")
                        .HasForeignKey("AssetMonitorDataAccess.Models.TagCommunicationRel", "IcmpTagId");

                    b.HasOne("AssetMonitorDataAccess.Models.SnmpTag", "SnmpTag")
                        .WithOne("TagCommunicationRel")
                        .HasForeignKey("AssetMonitorDataAccess.Models.TagCommunicationRel", "SnmpTagId");
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.UserEmailAddress", b =>
                {
                    b.HasOne("AssetMonitorDataAccess.Models.UserEmailAddressSet", "UserEmailAddressSet")
                        .WithMany("UserEmailAddresses")
                        .HasForeignKey("UserEmailAddressSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssetMonitorDataAccess.Models.UserEmailAssetRel", b =>
                {
                    b.HasOne("AssetMonitorDataAccess.Models.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetMonitorDataAccess.Models.UserEmailAddressSet", "UserEmailAddressSet")
                        .WithMany()
                        .HasForeignKey("UserEmailAddressSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
